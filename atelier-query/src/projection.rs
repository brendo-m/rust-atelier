/*!
One-line description.

More detailed description, with

# Example

*/

use atelier_core::model::values::Value;
use atelier_core::model::{Model, ShapeID};

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

#[derive(Clone, Debug, PartialEq)]
pub enum Projection {
    Empty,
    Shapes(Vec<ShapeID>),
    Members(Vec<ShapeID>),
    Values(Vec<Value>),
}

// ------------------------------------------------------------------------------------------------
// Private Types
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Public Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

impl Default for Projection {
    fn default() -> Self {
        Projection::Empty
    }
}

impl Projection {
    pub fn from(model: &Model) -> Self {
        Projection::Shapes(model.shape_names().cloned().collect())
    }

    is_only! { empty, Empty }

    is_as_array! { shapes, Shapes, ShapeID }

    is_as_array! { members, Members, ShapeID }

    is_as_array! { values, Values, Value }
}

// ------------------------------------------------------------------------------------------------
// Private Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Modules
// ------------------------------------------------------------------------------------------------

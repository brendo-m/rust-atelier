/*!
One-line description.

More detailed description, with

# Example

*/

use atelier_lib::core::action::ActionIssue;
use std::error::Error;

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Types
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Public Functions
// ------------------------------------------------------------------------------------------------

pub fn report_action_issues(issues: Option<Vec<ActionIssue>>) -> Result<(), Box<dyn Error>> {
    if let Some(issues) = issues {
        for issue in issues {
            println!("[{}] {}", issue.level(), issue.message(),);
            println!(
                "\tReported by {} for element {}.",
                issue.reporter(),
                match issue.locus() {
                    Some(id) => id.to_string(),
                    None => String::new(),
                }
            );
            println!()
        }
    } else {
        println!("No issues reported.");
    }
    Ok(())
}

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Modules
// ------------------------------------------------------------------------------------------------
